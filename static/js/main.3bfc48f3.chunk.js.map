{"version":3,"sources":["util.js","components/game/cube/Cube.tsx","components/game/GameView.tsx","components/question/QuestionsModal.tsx","components/game/Game.tsx","App.tsx","components/OpenScreen/closeup.jpg","components/OpenScreen/OpenScreen.tsx","reportWebVitals.ts","index.tsx"],"names":["Util","from","to","Math","floor","random","array","temporaryValue","randomIndex","currentIndex","length","Cube","value","dir","cssClass","toDirClass","className","Dir","DOWON","UP","LEFT","RIGHT","GameView","boardSize","foods","snake","cloms","Array","fill","i","forEach","item","row","colm","renderRow","clom","j","map","QUESTIONS","questionText","options","answerIndex","QuestionsModal","onClose","question","useSound","play","useState","answer","setSelectedAnswer","Modal","show","onHide","Form","Header","closeButton","Title","Body","option","index","Check","type","name","onChange","id","label","Footer","Button","variant","onClick","scoreToAdd","Screen","bordSize","Game","onGameEnd","gameInterval","setGameInterval","score","setScore","setSnake","setDir","setFoods","showQuestion","setShowQuestion","questions","setQuestions","useEffect","suffulArray","selectedIndex","setSelectedIndex","init","createSnake","initFood","startGame","draw","createFood","startGameLoop","document","onkeydown","e","onKey","keyCode","stopGameLoop","clearInterval","setInterval","onFrame","pos","getEmptyRandomPlace","createRandomInt","push","some","getNextPos","resPos","Object","assign","doMove","gameOver","snakHead","setTimeout","isGameOver","newPos","isInBoard","removedPos","shift","setDireactionSnakeParts","isEeatingMyself","eatedFood","findIndex","food","isEqual","unshift","splice","newIndex","console","log","haltGame","currentDir","getDiffDir","snakePartCurrent","snakePartNext","pos1","pos2","head","part","addedScore","OpenScreen","onStart","Card","style","width","Img","src","closeup","Text","size","App","volume","onPlayError","error","onPlay","onend","info","stop","isPlaying","currentScreen","setScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3bfc48f3.chunk.js","sourcesContent":["export class Util {\n    static createRandomInt(from, to) {\n        return Math.floor((Math.random() * to) + from);\n    }\n    static suffulArray(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n      \n        return array;\n      }\n      \n}\n","import { Dir } from '../Game';\nimport './Cube.css'\n\ntype CubeProps  = {\n    value: string,\n    dir: string\n}\nexport const Cube = ({value, dir}: CubeProps) => {\n    let cssClass = 'cell ';\n    if (value === 'snakePart' ) {\n        cssClass = `${cssClass} snakePart ${toDirClass(dir)}`;\n\n    } else if(value)  {\n      cssClass = `${cssClass} ${value}`;\n    }\n    return <td className={cssClass} ></td>\n            \n    \n}\nconst toDirClass = (dir: string): string => {\n    switch(dir) {\n      case Dir.DOWON: \n        return 'dir-down';\n      case Dir.UP: \n        return 'dir-up';\n      case Dir.LEFT: \n        return 'dir-left';\n      case Dir.RIGHT: \n      default:\n        return 'dir-right';\n    }\n  }","import React from \"react\";\nimport { Cube } from \"./cube/Cube\";\nimport { Food, SnakePart } from \"./Game\";\n\ntype GameProps = {\n    boardSize: number,\n    foods: Array<Food>,\n    snake: Array<SnakePart> \n}\nexport const GameView = ({boardSize, foods, snake}: GameProps) =>  {\n    const cloms = new Array(boardSize).fill(0,0, boardSize-1);\n    for (var i = 0; i < cloms.length; i++) {\n        cloms[i] = new Array(boardSize).fill(0,0,boardSize-1);\n    }\n    foods.forEach( (item) => {\n        cloms[item.row][item.colm] = item;\n    });\n    snake.forEach( (item) => {\n        cloms[item.row][item.colm] = item;\n    });\n    const renderRow = (clom: any, j: number) => {\n        return clom.map( (item: any, i: number) => {\n            return <Cube value={item.value} dir={item.dir} key={`${j} - ${i}`}></Cube>\n        });\n    }\n    return (<table>\n        <tbody>{cloms.map( (clom, j: number) => {\n       return(<tr key={j}> \n        {renderRow(clom, j)}\n        </tr>);\n    })}</tbody>\n    </table>);\n}","import React, { useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\nimport useSound from \"use-sound\";\nimport './QuestionModal.css';\nexport const QUESTIONS = [\n    {\n        questionText:'לך אל הנמלה עצל ...',\n        options: [\n            'ראה את דרכיה ושב בצל',\n             'ותחזור מלא מרץ' ,\n             'ראה את דרכיה וכחם'],\n        answerIndex: 2\n    },\n    {\n        questionText:'כמה רגלים יש לנמלה',\n        options: [\n            'שתי רגלים השאר ידיים',\n             'שמונה רגלים כמו לעכביש',\n             'שישה רגלים '\n        ],\n        answerIndex: 2\n    },\n    {\n        questionText:'האם נמלה מקימה קן ליד מקודות מזון',\n        options: [\n            'כן',\n             'לא',\n             'היא לא אוכלת'\n        ],\n        answerIndex: 0\n    },\n    {\n        questionText:'האם המלכה היא הנמלה היחידה בקן שיכולה להתרבות',\n        options: [\n            'כן ',\n             'לא'\n        ],\n        answerIndex: 0\n    },\n    {\n      questionText:'באיזה יבשת איין נמלים',\n      options: [\n          'נמלים יש בכל היבשות ',\n           'אין ביבשת אוסטרליה',\n           'איין נמלים ביבשת אנטרטיקה'\n      ],\n      answerIndex: 2\n    }, \n    {\n      questionText:'מה אוכלות רוב הנמלים',\n      options: [\n        'רק גלידה וניל',\n         'רוב הנמלים הן אוכלות כל',\n         'רק מצות שמורות של פסח',\n         'אבנים'\n      ],\n      answerIndex: 1\n    }\n];\n\nexport const QuestionsModal = ({onClose, question}: any) => {\n    const [play] = useSound('./bell.mp3');\n    const [answer, setSelectedAnswer] = useState<number>(-1);\n    return  <Modal show={true} dir=\"rtl\" className='question-modal' onHide={() => onClose(0)} >\n        <Form dir=\"rtl\">\n    <Modal.Header closeButton>\n      <Modal.Title>ענה על השאלה נכון וקבל נקודות</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>{question.questionText}\n    {question.options.map((option: string, index: number) => {\n        return <Form.Check \n                type='radio'\n                dir=\"rtl\"\n                name=\"answerOptions\"\n                key={index}\n                onChange={() => setSelectedAnswer(index)}\n                id={`default-radio`}\n                label={option}/>\n    })}\n    </Modal.Body>\n    <Modal.Footer>\n      <Button variant=\"primary\" onClick={()=> {\n          let scoreToAdd = 0;\n          if (answer === question.answerIndex) {\n            play();\n            scoreToAdd = 50\n\n          }\n          onClose(scoreToAdd);\n      }}>\n        שלח\n      </Button>\n    </Modal.Footer>\n    </Form>\n  </Modal>\n}","import React, { useEffect, useState } from \"react\";\nimport { Util } from \"../../util\";\nimport { GameView } from \"./GameView\";\nimport {QUESTIONS, QuestionsModal} from \"./../question/QuestionsModal\";\n\nexport class Dir {\n    static LEFT: string = 'left';\n    static RIGHT: string= 'right';\n    static DOWON: string= 'down';\n    static UP: string= 'UP';\n};\nexport type Food  = {\n    colm: number,\n    row: number,\n    value: string\n}\nexport type SnakePart  = {\n    colm: number,\n    row: number,\n    value: string,\n    dir: string\n}\n\nconst numOfFood: number = 8;\nconst bordSize: number = 17;\n\nexport const Game = ({onGameEnd}: any) =>  {\n    \n    let [gameInterval, setGameInterval] = useState<any>();\n    let [score, setScore] = useState<number>(0);\n    let [snake, setSnake] = useState<Array<SnakePart>>([]);\n    let [dir, setDir] = useState<string>(Dir.RIGHT);\n    let [foods, setFoods] = useState<Array<Food>>([]);\n\n    let [showQuestion, setShowQuestion] = useState<boolean>(false);\n    const [questions,setQuestions]  = useState([]);\n    useEffect( () => {\n        setQuestions(Util.suffulArray(QUESTIONS));\n    }, []);\n    const [selectedIndex, setSelectedIndex] = useState<number>(-1);\n\n    useEffect(() => {\n       init();      \n    },[]);\n\n    const init = () => {\n        //soundMgr.startBg();\n        //play();\n        createSnake();\n        initFood();\n        startGame();\n        draw();\n    }\n    \n    const initFood = () => {\n        for (let index = 0; index < numOfFood; index++) {\n          createFood();\n        }\n        setFoods(foods);\n      }\n    \n      const startGame = () =>  {\n        startGameLoop();\n        document.onkeydown = (e) => onKey(e);\n      }\n    \n      const onKey = (e: any) => {\n        if (e.keyCode === 38 && dir !== Dir.DOWON) {\n          dir = Dir.UP;\n        } else if (e.keyCode === 40 && dir !== Dir.UP) {\n          dir = Dir.DOWON;\n        } else if (e.keyCode === 37 && dir !== Dir.RIGHT) {\n          dir = Dir.LEFT;\n        } else if (e.keyCode ===39 && dir !== Dir.LEFT) {\n          dir = Dir.RIGHT;\n        }\n        setDir(dir);\n      }\n      \n      const stopGameLoop = () => {\n        clearInterval(gameInterval);\n      }\n\n      const startGameLoop = () => {\n        gameInterval= setInterval(() => onFrame(), 300);\n        setGameInterval(gameInterval);\n      }\n    \n      const haltGame = () => {\n        stopGameLoop();\n        const newIndex = selectedIndex + 1;\n        console.log('newIndex', newIndex,'QUESTIONS.length',QUESTIONS.length, newIndex % QUESTIONS.length-1);\n        setSelectedIndex(newIndex % (QUESTIONS.length-1));\n        console.log('halt game');\n        setShowQuestion(true);\n      }\n\n      const resumeGame = () => {\n        startGameLoop();\n        document.onkeydown = (e) => onKey(e);\n        //soundMgr.unMuteBg();\n      }\n      const createFood = () => {\n        let pos = getEmptyRandomPlace();\n        pos.value = `food-${Util.createRandomInt(1, 3)}`;\n        foods.push(pos);\n      }\n      \n      const getEmptyRandomPlace = (): any => {\n        const row = Math.floor(Math.random() * Math.floor(bordSize-1));\n        const colm = Math.floor(Math.random() * Math.floor(bordSize-1));\n        const isTaken = snake.some(pos => pos.row === row && pos.colm === colm) || foods.some(pos => pos.row === row && pos.colm === colm)\n        if (isTaken) {\n          return getEmptyRandomPlace();\n        } else {\n          return {\n            row,\n            colm\n          };\n        }\n      }\n\n      const createSnake = () =>  {\n        let pos: SnakePart = {\n          row: Math.floor(bordSize / 2),\n          colm: Math.floor(bordSize / 2),\n          dir: Dir.RIGHT,\n          value:'snakePart'\n        };\n        snake.push(pos);\n        for (let index = 0; index < 3; index++) {\n          pos = getNextPos(pos, dir);\n          snake.push(pos);\n        }\n        setSnake(snake);\n    \n      }\n\n      const getNextPos = (pos:any, dir: string) => {\n        let resPos = Object.assign({}, pos);\n        switch (dir) {\n          case Dir.LEFT:\n            resPos.colm = resPos.colm - 1;\n            break;\n          case Dir.RIGHT:\n            resPos.colm = resPos.colm + 1;\n            break;\n          case Dir.DOWON:\n            resPos.row = resPos.row + 1;\n            break;\n          case Dir.UP:\n            resPos.row = resPos.row - 1;\n            break;\n        }\n        return resPos;\n      }\n    \n      const getElementByPos = (pos:any)  => {\n        return document.getElementById(pos.row + '-' + pos.colm);\n      }\n    \n      const onFrame = () =>  {\n        let isGameOver = doMove();\n        if (isGameOver) {\n          gameOver();\n        }\n      }\n\n      const snakHead = () => {\n        return snake[snake.length - 1];\n      }\n\n      const gameOver = () => {\n        //soundMgr.stopBg();\n        //stop();\n        stopGameLoop();\n        setTimeout(() => onGameEnd() , 1000);\n      }\n     \n      const draw = ()  => {\n        // setDir(dir);\n        // setFoods(foods);\n        // setSnake(snake);\n      }\n      \n      const doMove = () => {\n        let isGameOver = false;\n        const newPos = getNextPos(snakHead(), dir);\n        if (!isInBoard(newPos) ) {\n          isGameOver = true;\n          return isGameOver;\n        }\n        let removedPos = snake.shift();\n        snake.push(newPos);\n        setDireactionSnakeParts();\n        if (isEeatingMyself()) {\n          isGameOver = true;\n          return isGameOver;  \n        }\n        const eatedFood = foods.findIndex((food) => {\n          return isEqual(food, newPos);\n        });\n    \n        if (eatedFood !== -1) {\n          snake.unshift(removedPos as SnakePart);\n          score = score + 10;\n          setScore(score);\n          foods.splice(eatedFood, 1);\n          createFood();\n          if (Util.createRandomInt(0,6) > 2) {\n            haltGame();  \n          }\n        }\n        setSnake([...snake]);\n        setFoods([...foods]);\n        return isGameOver;\n        \n      }\n\n      const setDireactionSnakeParts = () => {\n        for (let index = 0; index < snake.length-1; index++){\n          const currentDir = getDiffDir(snake[index] , snake[index + 1]);\n          snake[index].dir = currentDir;\n        }\n        snake[snake.length-1].dir = dir;\n      }\n\n      const getDiffDir = (snakePartCurrent:SnakePart, snakePartNext: SnakePart): string => {\n        if(snakePartCurrent.colm >  snakePartNext.colm) {\n          return Dir.LEFT;\n        }\n        if(snakePartCurrent.colm <  snakePartNext.colm) {\n          return Dir.RIGHT;\n        }\n        if(snakePartCurrent.row <  snakePartNext.row) {\n          return Dir.DOWON;\n        }\n        if(snakePartCurrent.row >  snakePartNext.row) {\n          return Dir.UP;\n        }\n        return Dir.RIGHT;\n      }\n\n      const isEqual = (pos1: any, pos2: any) =>  {\n        return (pos1.row === pos2.row && pos1.colm === pos2.colm)\n      }\n    \n      const isEeatingMyself = () => {\n        let head = snakHead();\n        for (let index = 0; index < snake.length - 1; index++) {\n          const part = snake[index];\n          if (isEqual(head, part)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      const isInBoard = (pos:any) => {\n        //console.log('check if game over', pos);\n        \n        if (pos.row >= bordSize ||\n          pos.row < 0 ||\n          pos.colm >= bordSize-1 ||\n          pos.colm < 0) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n      \n      return <div className=\"game-screen\">\n        <div className=\"game-board\">\n          <div className=\"score\">נקודות: {score} </div>\n          <GameView boardSize={bordSize} snake={snake} foods={foods}/>\n          {showQuestion? <QuestionsModal  question={questions[selectedIndex]} onClose={(addedScore: number) => {\n            score = score + addedScore;\n            setScore(score);\n            setShowQuestion(false);\n            resumeGame();\n          }}/>: null}\n          </div>\n          </div>\n}\n\n\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Game } from './components/game/Game';\nimport { OpenScreen } from './components/OpenScreen/OpenScreen';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport useSound from \"use-sound\";\n\nenum Screen {\n  OpenScreen = 'OpenScreen',\n  Game = 'Game'\n}\n    \n\nfunction App() {\n\n  // @ts-ignore\n  const [play, { stop , isPlaying}] =  useSound('./bg-sound.mp3',{volume: 0.75 , onPlayError : () => console.error('Error occured!') ,onPlay: () =>  console.error('On Play'),  onend: () => {\n    console.info('Sound ended!');\n  }});\n  const [currentScreen, setScreen] = useState<string>(Screen.OpenScreen);\n  console.log({isPlaying});\n  \n  return (\n    <div className=\"App\">\n        {currentScreen === Screen.OpenScreen? <OpenScreen onStart={()=> {\n          play();     \n          setScreen(Screen.Game)\n        }\n        }/>:\n        <Game onGameEnd={()=>  { \n          stop();\n          setScreen(Screen.OpenScreen);\n        }\n} />}\n    </div>\n  );\n}\nexport default App;\n","export default __webpack_public_path__ + \"static/media/closeup.8e44aa94.jpg\";","import React from \"react\"\nimport { Button, Card } from \"react-bootstrap\"\nimport closeup from './closeup.jpg'; // Tell webpack this JS file uses this image\n\nexport const OpenScreen = ({onStart}: any) => {\n    return <div className=\"screen\">\n        <Card style={{ width: '38rem' }}>\n            <Card.Img variant=\"top\" src={closeup} />\n            <Card.Body>\n                <Card.Title> משחק הנמלה</Card.Title>\n            <Card.Text>שחקו וענו על השאלות </Card.Text>\n            <Button variant=\"primary\" onClick={onStart} size=\"lg\">התחל משחק חדש</Button>\n        </Card.Body>\n        </Card>\n  </div>\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}